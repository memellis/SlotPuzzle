android {
    compileSdkVersion 23
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }

    //signingConfigs {
    //    release {
    //        storeFile file(System.getenv(SIGNING_STORE_FILE))
    //       storePassword System.getenv("SIGNING_STORE_PASSWORD")
    //        keyAlias System.getenv("SIGNING_KEY_ALIAS")
    //        keyPassword System.getenv("SIGNING_KEY_PASSWORD")
    //    }
    //}



    def isRunningOnTravis = System.getenv("TRAVIS") == "true"
    def isRunningOnGithubActions = System.getenv("GITHUB_ACTIONS") == "true"

 //   if (isRunningOnTravis) {
 //       println "I'm configuring the keystore"
 //       // configure keystore
 //       signingConfigs.release.storeFile = file("../../../../memellis.jks")
 //       signingConfigs.release.storePassword = System.getenv("keystore_password")
 //       signingConfigs.release.keyAlias = System.getenv("keystore_alias")
 //       signingConfigs.release.keyPassword = System.getenv("keystore_alias_password")
 //   }

    if (isRunningOnGithubActions) {
        println "I'm configuring the keystore on Github Actions"

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }

        // configure keystore
        def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
        def allFilesFromDir = new File(tmpFilePath).listFiles()

        if (allFilesFromDir != null) {
            def keystoreFile = allFilesFromDir.first()
            keystoreFile.renameTo("keystore/upload-keystore.jks")
        }

        signingConfigs {
            release {
                storeFile = file("keystore/upload-keystore.jks")
                storePassword System.getenv("SIGNING_STORE_PASSWORD")
                keyAlias System.getenv("SIGNING_KEY_ALIAS")
                keyPassword System.getenv("SIGNING_KEY_PASSWORD")
            }
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.ellzone.slotpuzzle2d.android/com.ellzone.slotpuzzle2d.android.AndroidLauncher'
}
