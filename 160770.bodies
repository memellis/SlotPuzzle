class WinMainWindow
!!!148098.cpp!!!	WinMain(inout hInstance : HINSTANCE, inout hPrevInstance : HINSTANCE, inout lpCmdLine : LPSTR, in nCmdShow : int) : int
INITCOMMONCONTROLSEX icc;
WNDCLASSEX wc;
LPCTSTR MainWndClass = TEXT("MinGW Win32 Application");
HWND hWnd;
HACCEL hAccelerators;
HMENU hSysMenu;
MSG msg;

// Initialise common controls.
icc.dwSize = sizeof(icc);
icc.dwICC = ICGetModuleHandle(NULL)C_WIN95_CLASSES;
InitCommonControlsEx(&icc);

// Class for our main window.
wc.cbSize        = sizeof(wc);
wc.style         = 0;
wc.lpfnWndProc   = &MainWndProc;
wc.cbClsExtra    = 0;
wc.cbWndExtra    = 0;
wc.hInstance     = hInstance;
wc.hIcon         = (HICON) LoadImage(hInstance, MAKEINTRESOURCE(IDI_APPICON), IMAGE_ICON, 0, 0, LR_SHARED);
wc.hCursor       = (HCURSOR) LoadImage(NULL, IDC_ARROW, IMAGE_CURSOR, 0, 0, LR_SHARED);
wc.hbrBackground = (HBRUSH) (COLOR_BTNFACE + 1);
wc.lpszMenuName  = MAKEINTRESOURCE(IDR_MAINMENU);
wc.lpszClassName = MainWndClass;
wc.hIconSm       = (HICON) LoadImage(hInstance, MAKEINTRESOURCE(IDI_APPICON), IMAGE_ICON, 16, 16, LR_SHARED);

// Register our window classes, or error.
if (! RegisterClassEx(&wc))
{
  MessageBox(NULL, TEXT("Error registering window class."), TEXT("Error"), MB_ICONERROR | MB_OK);
  return 0;
}
  
// Create instance of main window.
hWnd = CreateWindowEx(0, MainWndClass, TEXT("MinGW Win32 Application"), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT,
                        320, 200, NULL, NULL, hInstance, NULL);

// Error if window creation failed.
if (! hWnd)
{
  MessageBox(NULL, TEXT("Error creating main window."), TEXT("Error"), MB_ICONERROR | MB_OK);
  return 0;
}

// Load accelerators.
hAccelerators = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDR_ACCELERATOR));

// Add "about" to the system menu.
hSysMenu = GetSystemMenu(hWnd, FALSE);
InsertMenu(hSysMenu, 5, MF_BYPOSITION | MF_SEPARATOR, 0, NULL);
InsertMenu(hSysMenu, 6, MF_BYPOSITION, ID_HELP_ABOUT, TEXT("About"));

// Show window and force a paint.
ShowWindow(hWnd, nCmdShow);
UpdateWindow(hWnd);

// Main message loop.
while(GetMessage(&msg, NULL, 0, 0) > 0)
{
  if (! TranslateAccelerator(msg.hwnd, hAccelerators, &msg))
  {
    TranslateMessage(&msg);
    DispatchMessage(&msg);
  }
}

return (int) msg.wParam;
!!!148226.cpp!!!	MainWndProc(inout hWnd : HWND, inout msg : UINT, inout wParam : WPARAM, inout lParam : LPARAM) : LRESULT CALLBACK
static HINSTANCE hInstance;

switch (msg)
{  
  case WM_COMMAND:
  {
    switch (LOWORD(wParam))
    {
      case ID_HELP_ABOUT:
      {
        DialogBox(hInstance, MAKEINTRESOURCE(IDD_ABOUTDIALOG), hWnd, &AboutDialogProc);
        return 0;
      }

      case ID_FILE_EXIT:
      {
        DestroyWindow(hWnd);
        return 0;
      }
    }
    break;
  }

  case WM_GETMINMAXINFO:
  {
    MINMAXINFO *minMax = (MINMAXINFO*) lParam;
    minMax->ptMinTrackSize.x = 220;
    minMax->ptMinTrackSize.y = 110;

    return 0;
  }

  case WM_SYSCOMMAND:
    {
    switch (LOWORD(wParam))
    {
      case ID_HELP_ABOUT:
      {
        DialogBox(hInstance, MAKEINTRESOURCE(IDD_ABOUTDIALOG), hWnd, &AboutDialogProc);
        return 0;
      }
    }
    break;
  }
    
  case WM_CREATE:
  {
    hInstance = ((LPCREATESTRUCT) lParam)->hInstance;
    return 0;
  }

  case WM_DESTROY:
  {
    PostQuitMessage(0);
    return 0;
  }
}

return DefWindowProc(hWnd, msg, wParam, lParam);

!!!148354.cpp!!!	AboutDialogProc(inout hwndDlg : HWND, inout uMsg : UINT, inout wParam : WPARAM, inout lParam : LPARAM) : INT_PTR CALLBACK
switch (uMsg)
{
  case WM_COMMAND:
  {
    switch (LOWORD(wParam))
    {
      case IDOK:
      case IDCANCEL:
      {
        EndDialog(hwndDlg, (INT_PTR) LOWORD(wParam));
        return (INT_PTR) TRUE;
      }
    }
    break;
  }

  case WM_INITDIALOG:
    return (INT_PTR) TRUE;
}

return (INT_PTR) FALSE;
